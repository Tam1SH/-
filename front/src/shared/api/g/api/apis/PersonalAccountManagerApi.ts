/* tslint:disable */
/* eslint-disable */
/**
 * back, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  ConvertCurrencyModel,
  CreateAccountModel,
  PersonalAccount,
  TransferFundsModel,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ConvertCurrencyModelFromJSON,
    ConvertCurrencyModelToJSON,
    CreateAccountModelFromJSON,
    CreateAccountModelToJSON,
    PersonalAccountFromJSON,
    PersonalAccountToJSON,
    TransferFundsModelFromJSON,
    TransferFundsModelToJSON,
} from '../models/index';

export interface ConvertCurrencyRequest {
    convertCurrencyModel?: ConvertCurrencyModel;
}

export interface CreatePersonalAccountRequest {
    createAccountModel?: CreateAccountModel;
}

export interface GetPersonalAccountsRequest {
    userId: number;
}

export interface TransferFundsRequest {
    transferFundsModel?: TransferFundsModel;
}

/**
 * 
 */
export class PersonalAccountManagerApi extends runtime.BaseAPI {

    /**
     */
    async convertCurrencyRaw(requestParameters: ConvertCurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PersonalAccountManager/convert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConvertCurrencyModelToJSON(requestParameters['convertCurrencyModel']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async convertCurrency(convertCurrencyModel?: ConvertCurrencyModel, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.convertCurrencyRaw({ convertCurrencyModel: convertCurrencyModel }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPersonalAccountRaw(requestParameters: CreatePersonalAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PersonalAccountManager/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountModelToJSON(requestParameters['createAccountModel']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createPersonalAccount(createAccountModel?: CreateAccountModel, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createPersonalAccountRaw({ createAccountModel: createAccountModel }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPersonalAccountsRaw(requestParameters: GetPersonalAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonalAccount>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPersonalAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PersonalAccountManager/accounts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonalAccountFromJSON));
    }

    /**
     */
    async getPersonalAccounts(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonalAccount>> {
        const response = await this.getPersonalAccountsRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transferFundsRaw(requestParameters: TransferFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PersonalAccountManager/transfer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferFundsModelToJSON(requestParameters['transferFundsModel']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async transferFunds(transferFundsModel?: TransferFundsModel, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.transferFundsRaw({ transferFundsModel: transferFundsModel }, initOverrides);
        return await response.value();
    }

}
